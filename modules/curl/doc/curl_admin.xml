<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../docbook/entities.xml">
%docentities;

]>
<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
	This module implements protocol functions that use the libcurl library
	to fetch data from external HTTP servers or post data to HTTP servers.
	The module is using a concept of "connections" to define properties
	of sessions in a simple way.
	</para>
	<para>
	Function http_query allows &kamailio; to issue an HTTP GET
	request and get access to parts of the reply. This function has
	been ported from the utils module and now use the same libcurl
	functions.
	</para>
	</section>
	<section>
	<title>Dependencies</title>
	<section>
		<title>&kamailio; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
			None.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be
		installed before  
		running &kamailio; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>libcurl</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>
	
	<section>
		<title>Parameters</title>
		<section id="utils.p.default_connection_timeout">
			<title><varname>default_connection_timeout</varname> (int)</title>
			<para>
			Defines in seconds how long &kamailio; waits for response
			from servers.
			</para>
			<para>
			<emphasis>
				Default value is zero, i.e.,
				the timeout function is disabled.
			</emphasis>
			</para>
			<example>
			<title>Set <varname>default_connection_timeout</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("curl", "default_connection_timeout", 2)
...
				</programlisting>
			</example>
		</section>
		<section id="utils.p.curlcon">
			<title><varname>curlcon</varname> (string)</title>
			<para>
			Defines a connection and credentials for the connection for use
			in a connection-oriented function call in this module.
			</para>
			<para>
			<emphasis>Syntax:</emphasis>
			&lt;connection-name&gt;=&gt;&lt;schema&gt;://[&lt;username&gt;:&lt;password&gt;@]&lt;hostname/address&gt;
			</para>
			<para>
			The address in the URL is the base for the URL in the <function>curlcon_query()</function> call. The
			address given in the function call will be appended to the base URL in the connection definition.
			</para>
			<para>
			<emphasis>
				By default, no connections are defined.
			</emphasis>
			</para>
			<example>
			<title>Set <varname>curlcon</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("curl", "curlcon", "apione=>http://atlanta.example.com")
modparam("curl", "curlcon", "apitwo=>http://atlanta.example.com/api/12")
modparam("curl", "curlcon", "apithree=>http://annabella:mysecret@atlanta.example.com/api/12")
...
				</programlisting>
			</example>
		</section>
	</section>

	<section>
	<title>Functions</title>
		<section id="curl.f.http_query">
			<title>
				<function moreinfo="none">http_query(url, [post-data], result)</function>
			</title>
			<para>
			Sends HTTP GET or POST request according to URL given in
			<quote>url</quote> parameter, which is a string that may
			contain pseudo variables.
	    	        </para>
			<para>
			If you want to make a POST-Request, you have to define
			the <quote>post</quote>-data, that should be submitted
			in that request as the second parameter.
	    	        </para>
		        <para>
			If HTTP server returns a class 2xx, 3xx or 4xx reply,
			the first line of the reply's body (if any) is
			stored in <quote>result</quote> parameter,
			which must be a	writable pseudo	variable.
			</para>
			<para>
			Function returns reply code of HTTP reply or -1
			if something went wrong.
	   	     	</para>
			<para>
			This function can be used from REQUEST_ROUTE,
			ONREPLY_ROUTE, FAILURE_ROUTE, and BRANCH_ROUTE.
			</para>
			<example>
				<title><function>http_query()</function> usage</title>
				<programlisting format="linespecific">
...
# GET-Request
http_query("http://tutpro.com/index.php?r_uri=$(ru{s.escape.param})&amp;f_uri=$(fu{s.escape.param})",
           "$var(result)")
switch ($retcode) {
       ...
}
...
				</programlisting>
				<programlisting format="linespecific">
...
# POST-Request
http_query("http://tutpro.com/index.php", "r_uri=$(ru{s.escape.param})&amp;f_uri=$(fu{s.escape.param})",
           "$var(result)")
switch ($retcode) {
       ...
}
...
				</programlisting>
			</example>
		</section>
	</section>
	<section>
	<title>Pseudovariables</title>
		<section >
			<title>
				<function moreinfo="none">$curlerror(error)</function>
			</title>
			<para>
			cURL returns error codes from the protocol used. If an error
			happens, a cURL specific error code below 100 is returned.
			The $curlerror pv returns a text string representing the error.
			For more information on cURL error codes, please visit
			http://curl.haxx.se/libcurl/c/libcurl-errors.html
			</para>
		</section>
	</section>
	<section>
	<title>Counters</title>
		<section >
			<title>
				<function moreinfo="none">curl.connections</function>
			</title>
			<para>
				The number of connection definitions that are in-memory.
			</para>
		</section>
		<section >
			<title>
				<function moreinfo="none">curl.connok</function>
			</title>
			<para>
				The number of successful connections since &kamailio; start
			</para>
		</section>
		<section >
			<title>
				<function moreinfo="none">curl.connfail</function>
			</title>
			<para>
				The number of failed connections since &kamailio; start
			</para>
		</section>
	</section>
	
</chapter>
