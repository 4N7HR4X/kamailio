#!KAMAILIO
#
# This config file implements the basic P-CSCF functionality
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#
# Direct your questions about this file to: <sr-users@lists.sip-router.org>.
#
# For more information about the various parameters, functions and statements
# try http://sip-router.org/wiki/ .
#

####### Global Parameters #########
debug=2
log_stderror=no
sip_warning=yes
children=4

listen=udp:178.62.157.100:5060
alias=smsc.ams.voiceblue.com

user_agent_header="User-Agent: ng-voice SMSC"
server_header="Server: ng-voice SMSC"

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
auto_aliases=no

check_via=no    # (cmd. line: -v)
dns=no          # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)

# ------------------ module loading ----------------------------------
mpath="/root/kamailio-devel/lib64/kamailio/modules"
# (we try both the lib64 and the lib directory)

loadmodule "tm"
loadmodule "smsops"
loadmodule "xlog"
loadmodule "maxfwd"
loadmodule "textops"
loadmodule "sl"
loadmodule "sanity"
loadmodule "siputils"
loadmodule "pv"
loadmodule "uac"

modparam("uac","restore_mode","none")

####### Routing Logic ########
# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route

route {
	xlog("L_DBG", "$rm ($fu ($si:$sp) to $tu, $ci)\n");

	# per request initial checks
	route(REQINIT);

	if (!is_method("MESSAGE")) {
		append_to_reply("Allow: MESSAGE\r\n");
		send_reply("405", "Method not allowed");
		exit;
	}

	if ($cT == "application/vnd.3gpp.sms") {
		route(SMS);
	} else if ($cT == "text/plain") {
		route(SMSTEXT);
	} else {
		send_reply("488", "Content-Type not supported");
		exit;
	}
}

######################################################################
# Helper routes (Basic-Checks, NAT-Handling/RTP-Control, XML-RPC)
######################################################################
# Per SIP request initial checks
route[REQINIT] {
	# Trace this message

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

	# Reply to OPTIONS:
	if (is_method("OPTIONS") && (uri==myself)) {
		options_reply();
		exit;
	}	

	# Ignore Re-Transmits:
	if (t_lookup_request()) {
		exit;
	}
}

route[SMS] {
	xlog("3GPP-SMS: $rm ($fu ($si:$sp) to $tu, $ci)\n");
	xlog("SMS for $tpdu(destination) \"$tpdu(payload)\" (Valid: $tpdu(validity) )\n");
	send_reply("202", "Accepted");

	if (isRPDATA()) {
		$uac_req(method) = "MESSAGE";
		$uac_req(ruri) = $ai;
		$uac_req(furi) = $tu;
		$uac_req(turi) = $ai;
		$uac_req(ouri) = "sip:"+$si+":"+$sp;
		$uac_req(hdrs) = "Content-Type: application/vnd.3gpp.sms\r\nRequest-Disposition: fork, parallel\r\nAccept-Contact: *;+g.3gpp.smsip;require;explicit\r\n";
		$uac_req(body) = $smsack;
		uac_req_send();

		// Construct a new SMS-Body:
		$rpdata(all) = $null;
		$rpdata(type) = 1; // RP-DATA: Network to UE
		$rpdata(reference) = $rpdata(reference) + 1; // Build a new reference, based on the old one
		$rpdata(originator) = $rpdata(destination); // The Destination-SMSC becomes the originator
		$tpdu(type) = 4; // SMS-Deliver
		$tpdu(origen) = $tpdu(destination); // The Destination becomes the originator of the SMS
		$tpdu(payload) = "You wrote: "+$tpdu(payload)+" (proudly powered by Kamailio)";

		$uac_req(method) = "MESSAGE";
		$uac_req(ruri) = $ai;
		$uac_req(furi) = $tu;
		$uac_req(turi) = $ai;
		$uac_req(ouri) = "sip:"+$si+":"+$sp;
		$uac_req(hdrs) = "Content-Type: application/vnd.3gpp.sms\r\nRequest-Disposition: fork, parallel\r\nAccept-Contact: *;+g.3gpp.smsip;require;explicit\r\n";
		$uac_req(body) = $smsbody;
		uac_req_send();
	}

	exit;
}

route[SMSTEXT] {
	xlog("TEXT: $rm ($fu ($si:$sp) to $tu, $ci)\n");
        xlog("Request-Body: $rb\n");
	send_reply("200", "OK");
	exit;
}
