<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../docbook/entities.xml">
%docentities;
]>
<!-- I-CSCF Module User's Guide -->
<chapter>
  <title>&adminguide;</title>

  <section>
    <title>Overview</title>

    <para>This module provides all functionality to build an ICSCF.</para>
  </section>

  <section>
    <title>Dependencies</title>

    <section>
      <title>&kamailio; Modules</title>

      <para>The Following mouldes must be loaded before this module:</para>

      <itemizedlist>
        <listitem>
          <para>TM - Transaction Manager</para>
        </listitem>

        <listitem>
          <para>SL - Stateless Reply</para>
        </listitem>

        <listitem>
          <para>CDP - C Diameter Peer</para>
        </listitem>

        <listitem>
          <para>CDP_AVP - CDP AVP Applications</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>External Libraries or Applications</title>

      <para>This modules requires the Kamailio internal IMS library.</para>
    </section>
  </section>

  <section>
    <title>Parameters</title>

    <section>
      <title><varname>name</varname> (string)</title>

      <para>This is the name of the SCSCF as identified in communication with
      the HSS (Server-Name AVP of MAR).</para>

      <para><emphasis> Default value is 'sip:scscf.ims.smilecoms.com:6060'.
      </emphasis></para>

      <example>
        <title><varname>name</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "name", "sip:scscf3.ims.smilecoms.com:6060")
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>name</varname> (string)</title>

      <para>This is the name of the SCSCF as identified in communication with
      the HSS (Server-Name AVP of MAR).</para>

      <para><emphasis> Default value is 'sip:scscf.ims.smilecoms.com:6060'.
      </emphasis></para>

      <example>
        <title><varname>name</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "name", "sip:scscf3.ims.smilecoms.com:6060")
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>auth_data_hash_size</varname> (integer)</title>

      <para>This is the size of the hash table used to store auth vectors
      (AV). Default value is fine for most people. Use the parameter if you
      really need to change it.</para>

      <para>Default value is <quote>1024</quote>.</para>

      <example>
        <title><varname>auth_data_hash_size</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "auth_data_hash_size", 1024)
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>auth_vector_timeout</varname> (integer)</title>

      <para>This is the time, in seconds, that a SENTauth vector is valid for.
      If there is no response ...</para>

      <para>Default value is <quote>60</quote>.</para>

      <example>
        <title><varname>auth_vector_timeout</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "auth_vector_timeout", "domain")
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>auth_data_timeout</varname> (int)</title>

      <para>Time, in seconds, a used auth vector is valid for.</para>

      <para>Default value is <quote>60</quote>.</para>

      <example>
        <title><varname>password_column</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "auth_data_timeout", 60)
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>av_request_at_once</varname> (integer)</title>

      <para>How many auth vectors to request in MAR.</para>

      <para>Default value is 1</para>

      <example>
        <title><varname>av_request_at_once</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "av_request_at_once", 1)
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>av_request_at_sync</varname> (integer)</title>

      <para>How many auth vectors to request at sync. Default value is
      1.</para>

      <example>
        <title><varname>av_request_at_sync</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "av_request_at_sync", 1)
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>registration_default_algorithm</varname>
      (string)</title>

      <para>The default authentication algorithm to use for registration if
      one is not specified.</para>

      <para>Options are: <itemizedlist>
          <listitem>
            <para><emphasis>AKAV1-MD5</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis>AKAV2-MD5</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis>MD5</emphasis></para>
          </listitem>

          <listitem>
            <para>HSS-Selected - HSS will decide on auth algorithm</para>
          </listitem>
        </itemizedlist>Default value is <quote>AKAv1-MD5</quote>.</para>

      <example>
        <title><varname>registration_default_algorithm</varname> parameter
        usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "registration_default_algorithm", "HSS-Selected")
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>registration_qop</varname> (string)</title>

      <para>The QOP options to put in the authorisation challenges.</para>

      <para>Default value of this parameter is
      <quote>auth,auth-int</quote>.</para>

      <example>
        <title><varname>load_credentials</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "load_credentials", "auth-int")
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>cxdx_forced_peer</varname> (string)</title>

      <para>FQDN of Diameter Peer (HSS) to use for communication (MAR)</para>

      <para>Default value is <quote/>.</para>

      <example>
        <title><varname>cxdx_forced_peer</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "cxdx_forced_peer", "hss.ims.smilecoms.com")
...
</programlisting>
      </example>
    </section>

    <section>
      <title><varname>cxdx_dest_realm</varname> (string)</title>

      <para>Destination realm to be used in Diameter messags to HSS</para>

      <para>Default value is <quote>ims.smilecoms.com</quote>.</para>

      <example>
        <title><varname>version_table</varname> parameter usage</title>

        <programlisting format="linespecific">
...
modparam("auth_ims", "cxdx_dest_realm", "ims.smilecoms.com")
...
</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Functions</title>

    <section>
      <title><function
      moreinfo="none">I_scscf_select(initial)</function></title>

      <para>This function is used to retrieve the next unused SCSCF from
      thelist for this request (based on callid).</para>

      <para>A positive return code (1) means an SCSCF was found and is armed
      for routing.</para>

      <para>Meaning of the parameters is as follows:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>initial</emphasis> - Signal whether or not this is
          an original or subsequent.</para>
        </listitem>
      </itemizedlist>

      <para>This function can be used from REQUEST_ROUTE |
      FAILURE_ROUTE.</para>

      <example>
        <title><function moreinfo="none">I_scscf_select</function>
        usage</title>

        <programlisting format="linespecific">...
if (I_scscf_select("0")) {
     #there is an S-CSCF list - no need to do a UAR
     t_on_reply("register_reply");
     t_on_failure("register_failure");
     t_relay();
}
...
</programlisting>
      </example>
    </section>

    <section>
      <title><function moreinfo="none">I_scscf_drop()</function></title>

      <para>Drop the list of SCSCFs for this request (based on callid).</para>

      <para>This function can be used from REQUEST_ROUTE | FAILURE_ROUTE |
      REPLY_ROUTE</para>

      <example>
        <title><function moreinfo="none">I_scscf_drop</function> usage</title>

        <programlisting format="linespecific">...
I_scscf_drop();
...
</programlisting>
      </example>

      <para>.</para>
    </section>

    <section>
      <title><function
      moreinfo="none">I_perform_user_authorization_request(capabalities)</function></title>

      <para>Perform a UAR on Diameter CXDX interface. This function will build
      a list of SCSCFs to be used and populate the SCSCF list for the request.
      On a succesful return of this message you can get the next available
      SCSCF by using the I_scscf_select functoin in 4.1.</para>

      <itemizedlist>
        <listitem>
          <para>capabilities - whether to request capabilities or not "1" -
          with capabilities, "0" - no capabilities.</para>
        </listitem>
      </itemizedlist>

      <para>This function can be used from REQUEST_ROUTE.</para>

      <para>p.s. this is executed asynchronously. See example on how to
      retrieve return value</para>

      <example>
        <title>I_perform_user_authorization_request usage</title>

        <programlisting format="linespecific">
...
            I_perform_user_authorization_request("0"); #0=REG/DEREG; 1=REG+Capabilities
            #this is async so to know status we have to check the reply avp
            switch ($avp(s:uaa_return_code)){
                case 1: #success
                    if (I_scscf_select("0")){
                        t_on_failure("register_failure");
                        t_on_reply("register_reply");
                        if (!t_relay()) {
                            t_reply("500", "Error forwarding to SCSCF");
                        }
                    } else {#select failed
                        I_scscf_drop();
                        t_reply("500", "Server error on SCSCF Select (UAR)");
                    }
                    break;
                case -1: #failure
                    xlog("L_ERR", "UAR failure - error response sent from module");
                    break;
                case -2: #error
                    xlog("L_ERR", "UAR error - sending error response now");
                    t_reply("500", "UAR failed");
                    break;
                default:
                    xlog("L_ERR", "Unknown return code from UAR, value is [$avp(s:uaa_return_code)]");
                    t_reply("500", "Unknown response code from UAR"); 
                    break;
            }
...
</programlisting>
      </example>
    </section>

    <section>
      <title><function
      moreinfo="none">I_perform_location_information_request()</function></title>

      <para>This function can be used from REQUEST_ROUTE.</para>

      <example>
        <title>proxy_authorize usage</title>

        <programlisting format="linespecific">
...
if (!proxy_authorize("$fd", "subscriber)) {
proxy_challenge("$fd", "1");  # Realm will be autogenerated
};
...
</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Statistics</title>

    <section>
      <title>Average UAR Response Time (uar_avg_response_time)</title>

      <para>The average response time in milliseconds for UAR-UAA
      transaction.</para>
    </section>

    <section>
      <title>UAR Timeouts (uar_timeouts)</title>

      <para>The number of UAR timeouts.</para>
    </section>

    <section>
      <title>Average LIR Response Time (lir_avg_response_time)</title>

      <para>The average response time in milliseconds for LIR-LIA
      transaction.</para>
    </section>

    <section>
      <title>LIR Timeouts (lir_timeouts)</title>

      <para>The number of LIR timeouts.</para>
    </section>
  </section>
</chapter>
